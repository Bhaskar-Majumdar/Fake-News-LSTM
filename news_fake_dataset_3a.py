# -*- coding: utf-8 -*-
"""news fake dataset 3A

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QCEekEJMV9M_P9xsV9Z5xlj0KfdgQzZ6
"""

import pandas as pd

from google.colab import files 
uploaded = files.upload()

df=pd.read_csv("Task3a_training.csv")

df.head()

df.shape

df=df.dropna()

df['our rating']

df['our rating'].unique()

complet_df=df[['public_id','text','title', 'our rating']].rename(columns={'our rating':'rating'})

df['our rating'] = df['our rating'].replace({'FALSE':0, 'partially false':1, 'other':2, 'TRUE':3})

df

X=df.drop('our rating',axis=1)

y=df['our rating']

X.shape

y.shape

import tensorflow as tf

tf.__version__

from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense

voc_size=9000

messages=X.copy()



messages['text'][1]

messages.reset_index(inplace=True)

import nltk
import re
from nltk.corpus import stopwords

nltk.download('stopwords')

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
corpus = []
for i in range(0, len(messages)):
    print(i)
    review = re.sub('[^a-zA-Z]', ' ', messages['text'][i])
    review = review.lower()
    review = review.split()
    
    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
    review = ' '.join(review)
    corpus.append(review)

corpus

onehot_repr=[one_hot(words,voc_size)for words in corpus] 
onehot_repr

sent_length=50
embedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)
print(embedded_docs)

embedded_docs[0]

embedding_vector_features=60
model=Sequential()
model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
model.add(LSTM(100))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model.summary())

len(embedded_docs),y.shape

import numpy as np
X_final=np.array(embedded_docs)
y_final=np.array(y)

X_final.shape,y_final.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.2, random_state=100)

model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=15,batch_size=128)

from tensorflow.keras.layers import Dropout
## Creating model
embedding_vector_features=40
model=Sequential()
model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
model.add(Dropout(0.3))
model.add(LSTM(100))
model.add(Dropout(0.3))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='catagorical_crossentropy',optimizer='adam',metrics=['accuracy'])

y_pred=model.predict_classes(X_test)

from sklearn.metrics import confusion_matrix

from sklearn.metrics import classification_report
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

confusion_matrix(y_test,y_pred)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

